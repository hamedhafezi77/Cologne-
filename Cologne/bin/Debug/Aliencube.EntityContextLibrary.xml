<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Aliencube.EntityContextLibrary</name>
    </assembly>
    <members>
        <member name="T:Aliencube.EntityContextLibrary.BaseRepository`1">
            <summary>
            This represents the <c>BaseRepository</c> class that must be inherited.
            </summary>
            <typeparam name="TEntity">Entity model class type.</typeparam>
            <summary>
            This represents the <c>BaseRepository</c> class that must be inherited.
            </summary>
            <typeparam name="TEntity">Entity model class type.</typeparam>
        </member>
        <member name="T:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1">
            <summary>
            This provides interfaces to the <c>BaseRepository</c> class.
            </summary>
            <typeparam name="TEntity">Entity model type.</typeparam>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.Get(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the collection of entities queryable
            </summary>
            <param name="filter">Filter expression.</param>
            <returns>Returns the collection of entities queryable.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.GetAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the collection of entities queryable
            </summary>
            <param name="filter">Filter expression.</param>
            <returns>Returns the collection of entities queryable.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.Get">
            <summary>
            Gets the entire collection of entities queryable.
            </summary>
            <returns>Returns the entire collection of entities queryable.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.GetAsync">
            <summary>
            Gets the entire collection of entities queryable.
            </summary>
            <returns>Returns the entire collection of entities queryable.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.Get(System.Object)">
            <summary>
            Gets the entity corresponding to the entityId.
            </summary>
            <param name="entityId">EntityId as a primary key.</param>
            <returns>Returns the entity corresponding to the entityId.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.GetAsync(System.Object)">
            <summary>
            Gets the entity corresponding to the entityId.
            </summary>
            <param name="entityId">EntityId as a primary key.</param>
            <returns>Returns the entity corresponding to the entityId.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.Add(`0,System.Boolean)">
            <summary>
            Adds the new entity.
            </summary>
            <param name="entity">Entity instance to add.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.AddAsync(`0,System.Boolean)">
            <summary>
            Adds the new entity asynchronously.
            </summary>
            <param name="entity">Entity instance to add.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.AddRange(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Adds the new list of entities.
            </summary>
            <param name="entities">List of entity instances to add.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.AddRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Adds the new list of entities asynchronously.
            </summary>
            <param name="entities">List of entity instances to add.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.Update(`0,System.Boolean)">
            <summary>
            Updates the existing entity.
            </summary>
            <param name="entity">Entity instance to update.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.UpdateAsync(`0,System.Boolean)">
            <summary>
            Updates the existing entity asynchronously.
            </summary>
            <param name="entity">Entity instance to update.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.UpdateRange(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Updates the existing list of entities.
            </summary>
            <param name="entities">List of entity instances to update.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.UpdateRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Updates the existing list of entities asynchronously.
            </summary>
            <param name="entities">List of entity instances to update.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.AddOrUpdate(`0,System.Boolean)">
            <summary>
            Adds or updates entity.
            </summary>
            <param name="entity">Entity instance to update.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.AddOrUpdateAsync(`0,System.Boolean)">
            <summary>
            Adds or updates entity asynchronously.
            </summary>
            <param name="entity">Entity instance to update.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.AddOrUpdateRange(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Adds or updates the existing list of entities.
            </summary>
            <param name="entities">List of entity instances to update.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.AddOrUpdateRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Adds or updates the existing list of entities asynchronously.
            </summary>
            <param name="entities">List of entity instances to update.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.Delete(System.Object,System.Boolean)">
            <summary>
            Deletes the entity corresponding to the entityId fro the DB set.
            </summary>
            <param name="entityId">EntityId as a primary key.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.DeleteAsync(System.Object,System.Boolean)">
            <summary>
            Deletes the entity corresponding to the entityId fro the DB set asynchronously.
            </summary>
            <param name="entityId">EntityId as a primary key.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.DeleteRange(System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Deletes the list of entities corresponding to the entityIds fro the DB set.
            </summary>
            <param name="entityIds">List of entityIds as primary keys.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.DeleteRangeAsync(System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Deletes the list of entities corresponding to the entityIds fro the DB set asynchronously.
            </summary>
            <param name="entityIds">List of entityIds as primary keys.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.Delete(`0,System.Boolean)">
            <summary>
            Deletes the entity from the DB set.
            </summary>
            <param name="entity">Entity instance to delete.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.DeleteAsync(`0,System.Boolean)">
            <summary>
            Deletes the entity from the DB set asynchronously.
            </summary>
            <param name="entity">Entity instance to delete.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.DeleteRange(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Deletes the list of entities from the DB set.
            </summary>
            <param name="entities">List of entity instances to delete.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.DeleteRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Deletes the list of entities from the DB set asynchronously.
            </summary>
            <param name="entities">List of entity instances to delete.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.ExecuteStoreQuery``1(System.String,System.Object)">
            <summary>
            Execute stored procedure or direct SQL. This is mainly for the SELECT statements.
            </summary>
            <typeparam name="TOutput">Output type parameter.</typeparam>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="input">Input value.</param>
            <returns>Returns the list of <c>TOutput</c> objects.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.ExecuteStoreQueryAsync``1(System.String,System.Object)">
            <summary>
            Execute stored procedure or direct SQL asynchronously. This is mainly for the SELECT statements.
            </summary>
            <typeparam name="TOutput">Output type parameter.</typeparam>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="input">Input value.</param>
            <returns>Returns the list of <c>TOutput</c> objects.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.ExecuteStoreCommand(System.String,System.Object)">
            <summary>
            Execute stored procedure or direct SQL. This is mainly for the INSERT, UPDATE or DELETE statements.
            </summary>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="input">Input value.</param>
            <returns>Returns the number of rows affected.</returns>
            <remarks>Make sure that this might return -1, if the stored procedure contains the <c>SET NOCOUNT ON</c> statement.</remarks>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.ExecuteStoreCommandAsync(System.String,System.Object)">
            <summary>
            Execute stored procedure or direct SQL asynchronously. This is mainly for the INSERT, UPDATE or DELETE statements.
            </summary>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="input">Input value.</param>
            <returns>Returns the number of rows affected.</returns>
            <remarks>Make sure that this might return -1, if the stored procedure contains the <c>SET NOCOUNT ON</c> statement.</remarks>
        </member>
        <member name="P:Aliencube.EntityContextLibrary.Interfaces.IBaseRepository`1.Context">
            <summary>
            Gets the <c>DbContext</c> instance.
            </summary>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.GetAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the collection of entities queryable
            </summary>
            <param name="filter">Filter expression.</param>
            <returns>Returns the collection of entities queryable.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.GetAsync">
            <summary>
            Gets the entire collection of entities queryable.
            </summary>
            <returns>Returns the entire collection of entities queryable.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.GetAsync(System.Object)">
            <summary>
            Gets the entity corresponding to the entityId.
            </summary>
            <param name="entityId">EntityId as a primary key.</param>
            <returns>Returns the entity corresponding to the entityId.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.AddAsync(`0,System.Boolean)">
            <summary>
            Adds the new entity.
            </summary>
            <param name="entity">Entity instance to add.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.AddRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Adds the new list of entities.
            </summary>
            <param name="entities">List of entity instances to add.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.UpdateAsync(`0,System.Boolean)">
            <summary>
            Updates the existing entity.
            </summary>
            <param name="entity">Entity instance to update.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.UpdateRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Updates the existing list of entities.
            </summary>
            <param name="entities">List of entity instances to update.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.AddOrUpdateAsync(`0,System.Boolean)">
            <summary>
            Adds or updates entity asynchronously.
            </summary>
            <param name="entity">Entity instance to update.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.AddOrUpdateRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Adds or updates the existing list of entities asynchronously.
            </summary>
            <param name="entities">List of entity instances to update.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.DeleteAsync(System.Object,System.Boolean)">
            <summary>
            Deletes the entity corresponding to the entityId fro the DB set.
            </summary>
            <param name="entityId">EntityId as a primary key.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.DeleteRangeAsync(System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Deletes the list of entities corresponding to the entityIds fro the DB set.
            </summary>
            <param name="entityIds">List of entityIds as primary keys.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.DeleteAsync(`0,System.Boolean)">
            <summary>
            Deletes the entity from the DB set.
            </summary>
            <param name="entity">Entity instance to delete.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.DeleteRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Deletes the list of entities from the DB set.
            </summary>
            <param name="entities">List of entity instances to delete.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.ExecuteStoreQueryAsync``1(System.String,System.Object)">
            <summary>
            Execute stored procedure or direct SQL asynchronously. This is mainly for the SELECT statements.
            </summary>
            <typeparam name="TOutput">Output type parameter.</typeparam>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="input">Input value.</param>
            <returns>Returns the list of <c>TOutput</c> objects.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.ExecuteStoreCommandAsync(System.String,System.Object)">
            <summary>
            Execute stored procedure or direct SQL asynchronously. This is mainly for the INSERT, UPDATE or DELETE statements.
            </summary>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="input">Input value.</param>
            <returns>Returns the number of rows affected.</returns>
            <remarks>Make sure that this might return -1, if the stored procedure contains the <c>SET NOCOUNT ON</c> statement.</remarks>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.#ctor(Aliencube.EntityContextLibrary.Interfaces.IDbContextFactory)">
            <summary>
            Initialises a new instance of the <see cref="T:Aliencube.EntityContextLibrary.BaseRepository`1"/> class.
            </summary>
            <param name="contextFactory"><c>DbContextFactory</c> instance.</param>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.Get(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the collection of entities queryable
            </summary>
            <param name="filter">Filter expression.</param>
            <returns>Returns the collection of entities queryable.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.Get">
            <summary>
            Gets the entire collection of entities queryable.
            </summary>
            <returns>Returns the entire collection of entities queryable.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.Get(System.Object)">
            <summary>
            Gets the entity corresponding to the entityId.
            </summary>
            <param name="entityId">EntityId as a primary key.</param>
            <returns>Returns the entity corresponding to the entityId.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.Add(`0,System.Boolean)">
            <summary>
            Adds the new entity.
            </summary>
            <param name="entity">Entity instance to add.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.AddRange(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Adds the new list of entities.
            </summary>
            <param name="entities">List of entity instances to add.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.Update(`0,System.Boolean)">
            <summary>
            Updates the existing entity.
            </summary>
            <param name="entity">Entity instance to update.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.UpdateRange(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Updates the existing list of entities.
            </summary>
            <param name="entities">List of entity instances to update.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.AddOrUpdate(`0,System.Boolean)">
            <summary>
            Adds or updates entity.
            </summary>
            <param name="entity">Entity instance to update.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.AddOrUpdateRange(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Adds or updates the existing list of entities.
            </summary>
            <param name="entities">List of entity instances to update.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.Delete(System.Object,System.Boolean)">
            <summary>
            Deletes the entity corresponding to the entityId fro the DB set.
            </summary>
            <param name="entityId">EntityId as a primary key.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.DeleteRange(System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            Deletes the list of entities corresponding to the entityIds fro the DB set.
            </summary>
            <param name="entityIds">List of entityIds as primary keys.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.Delete(`0,System.Boolean)">
            <summary>
            Deletes the entity from the DB set.
            </summary>
            <param name="entity">Entity instance to delete.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.DeleteRange(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Deletes the list of entities from the DB set.
            </summary>
            <param name="entities">List of entity instances to delete.</param>
            <param name="save">Value that specifies whether to save entity or not.</param>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.ExecuteStoreQuery``1(System.String,System.Object)">
            <summary>
            Execute stored procedure or direct SQL. This is mainly for the SELECT statements.
            </summary>
            <typeparam name="TOutput">Output type parameter.</typeparam>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="input">Input value.</param>
            <returns>Returns the list of <c>TOutput</c> objects.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.ExecuteStoreCommand(System.String,System.Object)">
            <summary>
            Execute stored procedure or direct SQL. This is mainly for the INSERT, UPDATE or DELETE statements.
            </summary>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="input">Input value.</param>
            <returns>Returns the number of rows affected.</returns>
            <remarks>Make sure that this might return -1, if the stored procedure contains the <c>SET NOCOUNT ON</c> statement.</remarks>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.BaseRepository`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing,
            or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Aliencube.EntityContextLibrary.BaseRepository`1.Context">
            <summary>
            Gets the <c>DbContext</c> instance.
            </summary>
        </member>
        <member name="T:Aliencube.EntityContextLibrary.DbContextFactory`1">
            <summary>
            This represents the factory entity for <c>DbContext</c>.
            </summary>
            <typeparam name="TContext">
            Type parameter of the context class inheriting <see cref="T:System.Data.Entity.DbContext"/>.
            </typeparam>
        </member>
        <member name="T:Aliencube.EntityContextLibrary.Interfaces.IDbContextFactory">
            <summary>
            This provides interfaces to the <c>DbContextFactory</c> class.
            </summary>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IDbContextFactory.CreateContext">
            <summary>
            Creates the <c>DbContext</c> instance.
            </summary>
            <returns>Returns the <c>DbContext</c> instance.</returns>
        </member>
        <member name="P:Aliencube.EntityContextLibrary.Interfaces.IDbContextFactory.Context">
            <summary>
            Gets the <c>DbContext</c> instance.
            </summary>
        </member>
        <member name="P:Aliencube.EntityContextLibrary.Interfaces.IDbContextFactory.DbContextType">
            <summary>
            Gets the type of the <c>DbContext</c> instance.
            </summary>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.DbContextFactory`1.CreateContext">
            <summary>
            Creates the <c>DbContext</c> instance.
            </summary>
            <returns>Returns the <c>DbContext</c> instance.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.DbContextFactory`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing,
            or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Aliencube.EntityContextLibrary.DbContextFactory`1.Context">
            <summary>
            Gets the <c>DbContext</c> instance.
            </summary>
        </member>
        <member name="P:Aliencube.EntityContextLibrary.DbContextFactory`1.DbContextType">
            <summary>
            Gets the type of the <c>DbContext</c> instance.
            </summary>
        </member>
        <member name="T:Aliencube.EntityContextLibrary.Extensions.ConvertHelper">
            <summary>
            This represents the helper entity for data type conversion.
            </summary>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.ConvertHelper.ConvertToDictionary(System.Object)">
            <summary>
            Converts the object to the <c>Dictionary{string, object}</c> type object.
            </summary>
            <param name="input">Data object.</param>
            <returns>Returns the <c>Dictionary{string, object}</c> type object.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.ConvertHelper.ConvertToParameters(System.Object)">
            <summary>
            Converts the object to the <c>SqlParameter</c> array.
            </summary>
            <param name="input">Data object.</param>
            <returns>Returns the <c>SqlParameter</c> array.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.ConvertHelper.ConvertToParameters(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Converts the <c>Dictionary{string, object}</c> object to the <c>SqlParameter</c> array.
            </summary>
            <param name="input"><c>Dictionary{string, object}</c> object.</param>
            <returns>Returns the <c>SqlParameter</c> array.</returns>
        </member>
        <member name="T:Aliencube.EntityContextLibrary.Extensions.DbContextCommandExtensions">
            <summary>
            This represents the entity that contains extension methods for the <c>DbContext</c> class.
            </summary>
            <summary>
            This represents the entity that contains extension methods for the <c>DbContext</c> class.
            </summary>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextCommandExtensions.ExecuteStoreCommand``1(System.Data.Entity.DbContext,System.String,``0)">
            <summary>
            Executes a command against the database server that does not return a sequence of objects.
            </summary>
            <typeparam name="TInput">Input type parameter.</typeparam>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="input">Input value.</param>
            <returns>Returns the number of rows affected.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextCommandExtensions.ExecuteStoreCommand``1(System.Data.Entity.DbContext,System.Data.Entity.TransactionalBehavior,System.String,``0)">
            <summary>
            Executes a command against the database server that does not return a sequence of objects.
            </summary>
            <typeparam name="TInput">Input type parameter.</typeparam>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="transactionalBehavior">Controls the creation of a transaction for this command.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="input">Input value.</param>
            <returns>Returns the number of rows affected.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextCommandExtensions.ExecuteStoreCommandAsync``1(System.Data.Entity.DbContext,System.String,``0)">
            <summary>
            Executes a command against the database server that does not return a sequence of objects asynchronously.
            </summary>
            <typeparam name="TInput">Input type parameter.</typeparam>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="input">Input value.</param>
            <returns>Returns the number of rows affected.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextCommandExtensions.ExecuteStoreCommandAsync``1(System.Data.Entity.DbContext,System.String,System.Threading.CancellationToken,``0)">
            <summary>
            Executes a command against the database server that does not return a sequence of objects asynchronously.
            </summary>
            <typeparam name="TInput">Input type parameter.</typeparam>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="cancellationToken">A <c>CancellationToken</c> to observe while waiting for the task to complete.</param>
            <param name="input">Input value.</param>
            <returns>Returns the number of rows affected.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextCommandExtensions.ExecuteStoreCommandAsync``1(System.Data.Entity.DbContext,System.Data.Entity.TransactionalBehavior,System.String,``0)">
            <summary>
            Executes a command against the database server that does not return a sequence of objects asynchronously.
            </summary>
            <typeparam name="TInput">Input type parameter.</typeparam>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="transactionalBehavior">Controls the creation of a transaction for this command.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="input">Input value.</param>
            <returns>Returns the number of rows affected.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextCommandExtensions.ExecuteStoreCommandAsync``1(System.Data.Entity.DbContext,System.Data.Entity.TransactionalBehavior,System.String,System.Threading.CancellationToken,``0)">
            <summary>
            Executes a command against the database server that does not return a sequence of objects asynchronously.
            </summary>
            <typeparam name="TInput">Input type parameter.</typeparam>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="transactionalBehavior">Controls the creation of a transaction for this command.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="cancellationToken">A <c>CancellationToken</c> to observe while waiting for the task to complete.</param>
            <param name="input">Input value.</param>
            <returns>Returns the number of rows affected.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextCommandExtensions.ExecuteStoreCommand(System.Data.Entity.DbContext,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a command against the database server that does not return a sequence of objects.
            </summary>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="input">List of input values.</param>
            <returns>Returns the number of rows affected.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextCommandExtensions.ExecuteStoreCommand(System.Data.Entity.DbContext,System.Data.Entity.TransactionalBehavior,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a command against the database server that does not return a sequence of objects.
            </summary>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="transactionalBehavior">Controls the creation of a transaction for this command.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="input">List of input values.</param>
            <returns>Returns the number of rows affected.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextCommandExtensions.ExecuteStoreCommandAsync(System.Data.Entity.DbContext,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a command against the database server that does not return a sequence of objects asynchronously.
            </summary>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="input">List of input values.</param>
            <returns>Returns the number of rows affected.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextCommandExtensions.ExecuteStoreCommandAsync(System.Data.Entity.DbContext,System.String,System.Threading.CancellationToken,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a command against the database server that does not return a sequence of objects asynchronously.
            </summary>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="cancellationToken">A <c>CancellationToken</c> to observe while waiting for the task to complete.</param>
            <param name="input">List of input values.</param>
            <returns>Returns the number of rows affected.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextCommandExtensions.ExecuteStoreCommandAsync(System.Data.Entity.DbContext,System.Data.Entity.TransactionalBehavior,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a command against the database server that does not return a sequence of objects asynchronously.
            </summary>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="transactionalBehavior">Controls the creation of a transaction for this command.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="input">List of input values.</param>
            <returns>Returns the number of rows affected.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextCommandExtensions.ExecuteStoreCommandAsync(System.Data.Entity.DbContext,System.Data.Entity.TransactionalBehavior,System.String,System.Threading.CancellationToken,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a command against the database server that does not return a sequence of objects asynchronously.
            </summary>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="transactionalBehavior">Controls the creation of a transaction for this command.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="cancellationToken">A <c>CancellationToken</c> to observe while waiting for the task to complete.</param>
            <param name="input">List of input values.</param>
            <returns>Returns the number of rows affected.</returns>
        </member>
        <member name="T:Aliencube.EntityContextLibrary.Extensions.DbContextQueryExtensions">
            <summary>
            This represents the entity that contains extension methods for the <c>DbContext</c> class.
            </summary>
            <summary>
            This represents the entity that contains extension methods for the <c>DbContext</c> class.
            </summary>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextQueryExtensions.ExecuteStoreQuery``1(System.Data.Entity.DbContext,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a query directly against the data source and returns a sequence of typed results.
            </summary>
            <typeparam name="TOutput">Output type parameter.</typeparam>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="input">List of input values.</param>
            <returns>Returns the list of <c>TOutput</c> objects.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextQueryExtensions.ExecuteStoreQuery``1(System.Data.Entity.DbContext,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a query directly against the data source and returns a sequence of typed results.
            </summary>
            <typeparam name="TOutput">Output type parameter.</typeparam>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="executionOptions"><c>ExecutionOptions</c> object.</param>
            <param name="input">List of input values.</param>
            <returns>Returns the list of <c>TOutput</c> objects.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextQueryExtensions.ExecuteStoreQuery``1(System.Data.Entity.DbContext,System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a query directly against the data source and returns a sequence of typed results.
            </summary>
            <typeparam name="TOutput">Output type parameter.</typeparam>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="entitySetName">The entity set of the TResult type.</param>
            <param name="executionOptions"><c>ExecutionOptions</c> object.</param>
            <param name="input">List of input values.</param>
            <returns>Returns the list of <c>TOutput</c> objects.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextQueryExtensions.ExecuteStoreQuery``1(System.Data.Entity.DbContext,System.String,System.String,System.Data.Entity.Core.Objects.MergeOption,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a query directly against the data source and returns a sequence of typed results.
            </summary>
            <typeparam name="TOutput">Output type parameter.</typeparam>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="entitySetName">The entity set of the TResult type.</param>
            <param name="mergeOption">The <c>MergeOption</c> to use when executing the query.</param>
            <param name="input">List of input values.</param>
            <returns>Returns the list of <c>TOutput</c> objects.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextQueryExtensions.ExecuteStoreQueryAsync``1(System.Data.Entity.DbContext,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a query directly against the data source and returns a sequence of typed results asynchronously.
            </summary>
            <typeparam name="TOutput">Output type parameter.</typeparam>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="input">List of input values.</param>
            <returns>Returns the list of <c>TOutput</c> objects.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextQueryExtensions.ExecuteStoreQueryAsync``1(System.Data.Entity.DbContext,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a query directly against the data source and returns a sequence of typed results asynchronously.
            </summary>
            <typeparam name="TOutput">Output type parameter.</typeparam>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="executionOptions"><c>ExecutionOptions</c> object.</param>
            <param name="input">List of input values.</param>
            <returns>Returns the list of <c>TOutput</c> objects.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextQueryExtensions.ExecuteStoreQueryAsync``1(System.Data.Entity.DbContext,System.String,System.Threading.CancellationToken,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a query directly against the data source and returns a sequence of typed results asynchronously.
            </summary>
            <typeparam name="TOutput">Output type parameter.</typeparam>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="cancellationToken">A <c>CancellationToken</c> to observe while waiting for the task to complete.</param>
            <param name="input">List of input values.</param>
            <returns>Returns the list of <c>TOutput</c> objects.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextQueryExtensions.ExecuteStoreQueryAsync``1(System.Data.Entity.DbContext,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Threading.CancellationToken,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a query directly against the data source and returns a sequence of typed results asynchronously.
            </summary>
            <typeparam name="TOutput">Output type parameter.</typeparam>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="executionOptions"><c>ExecutionOptions</c> object.</param>
            <param name="cancellationToken">A <c>CancellationToken</c> to observe while waiting for the task to complete.</param>
            <param name="input">List of input values.</param>
            <returns>Returns the list of <c>TOutput</c> objects.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextQueryExtensions.ExecuteStoreQueryAsync``1(System.Data.Entity.DbContext,System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a query directly against the data source and returns a sequence of typed results asynchronously.
            </summary>
            <typeparam name="TOutput">Output type parameter.</typeparam>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="entitySetName">The entity set of the TResult type.</param>
            <param name="executionOptions"><c>ExecutionOptions</c> object.</param>
            <param name="input">List of input values.</param>
            <returns>Returns the list of <c>TOutput</c> objects.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextQueryExtensions.ExecuteStoreQueryAsync``1(System.Data.Entity.DbContext,System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Threading.CancellationToken,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a query directly against the data source and returns a sequence of typed results asynchronously.
            </summary>
            <typeparam name="TOutput">Output type parameter.</typeparam>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="entitySetName">The entity set of the TResult type.</param>
            <param name="executionOptions"><c>ExecutionOptions</c> object.</param>
            <param name="cancellationToken">A <c>CancellationToken</c> to observe while waiting for the task to complete.</param>
            <param name="input">List of input values.</param>
            <returns>Returns the list of <c>TOutput</c> objects.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextQueryExtensions.ExecuteStoreQuery``1(System.Data.Entity.DbContext,System.String,System.Object)">
            <summary>
            Executes a query directly against the data source and returns a sequence of typed results.
            </summary>
            <typeparam name="TOutput">Output type parameter.</typeparam>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="input">Input value.</param>
            <returns>Returns the list of <c>TOutput</c> objects.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextQueryExtensions.ExecuteStoreQuery``1(System.Data.Entity.DbContext,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object)">
            <summary>
            Executes a query directly against the data source and returns a sequence of typed results.
            </summary>
            <typeparam name="TOutput">Output type parameter.</typeparam>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="executionOptions"><c>ExecutionOptions</c> object.</param>
            <param name="input">Input value.</param>
            <returns>Returns the list of <c>TOutput</c> objects.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextQueryExtensions.ExecuteStoreQuery``1(System.Data.Entity.DbContext,System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object)">
            <summary>
            Executes a query directly against the data source and returns a sequence of typed results.
            </summary>
            <typeparam name="TOutput">Output type parameter.</typeparam>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="entitySetName">The entity set of the TResult type.</param>
            <param name="executionOptions"><c>ExecutionOptions</c> object.</param>
            <param name="input">Input value.</param>
            <returns>Returns the list of <c>TOutput</c> objects.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextQueryExtensions.ExecuteStoreQuery``1(System.Data.Entity.DbContext,System.String,System.String,System.Data.Entity.Core.Objects.MergeOption,System.Object)">
            <summary>
            Executes a query directly against the data source and returns a sequence of typed results.
            </summary>
            <typeparam name="TOutput">Output type parameter.</typeparam>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="entitySetName">The entity set of the TResult type.</param>
            <param name="mergeOption">The <c>MergeOption</c> to use when executing the query.</param>
            <param name="input">Input value.</param>
            <returns>Returns the list of <c>TOutput</c> objects.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextQueryExtensions.ExecuteStoreQueryAsync``1(System.Data.Entity.DbContext,System.String,System.Object)">
            <summary>
            Executes a query directly against the data source and returns a sequence of typed results asynchronously.
            </summary>
            <typeparam name="TOutput">Output type parameter.</typeparam>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="input">Input value.</param>
            <returns>Returns the list of <c>TOutput</c> objects.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextQueryExtensions.ExecuteStoreQueryAsync``1(System.Data.Entity.DbContext,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object)">
            <summary>
            Executes a query directly against the data source and returns a sequence of typed results asynchronously.
            </summary>
            <typeparam name="TOutput">Output type parameter.</typeparam>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="executionOptions"><c>ExecutionOptions</c> object.</param>
            <param name="input">Input value.</param>
            <returns>Returns the list of <c>TOutput</c> objects.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextQueryExtensions.ExecuteStoreQueryAsync``1(System.Data.Entity.DbContext,System.String,System.Threading.CancellationToken,System.Object)">
            <summary>
            Executes a query directly against the data source and returns a sequence of typed results asynchronously.
            </summary>
            <typeparam name="TOutput">Output type parameter.</typeparam>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="cancellationToken">A <c>CancellationToken</c> to observe while waiting for the task to complete.</param>
            <param name="input">Input value.</param>
            <returns>Returns the list of <c>TOutput</c> objects.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextQueryExtensions.ExecuteStoreQueryAsync``1(System.Data.Entity.DbContext,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Threading.CancellationToken,System.Object)">
            <summary>
            Executes a query directly against the data source and returns a sequence of typed results asynchronously.
            </summary>
            <typeparam name="TOutput">Output type parameter.</typeparam>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="executionOptions"><c>ExecutionOptions</c> object.</param>
            <param name="cancellationToken">A <c>CancellationToken</c> to observe while waiting for the task to complete.</param>
            <param name="input">Input value.</param>
            <returns>Returns the list of <c>TOutput</c> objects.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextQueryExtensions.ExecuteStoreQueryAsync``1(System.Data.Entity.DbContext,System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object)">
            <summary>
            Executes a query directly against the data source and returns a sequence of typed results asynchronously.
            </summary>
            <typeparam name="TOutput">Output type parameter.</typeparam>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="entitySetName">The entity set of the TResult type.</param>
            <param name="executionOptions"><c>ExecutionOptions</c> object.</param>
            <param name="input">Input value.</param>
            <returns>Returns the list of <c>TOutput</c> objects.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Extensions.DbContextQueryExtensions.ExecuteStoreQueryAsync``1(System.Data.Entity.DbContext,System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Threading.CancellationToken,System.Object)">
            <summary>
            Executes a query directly against the data source and returns a sequence of typed results asynchronously.
            </summary>
            <typeparam name="TOutput">Output type parameter.</typeparam>
            <param name="context"><c>DbContext</c> instance.</param>
            <param name="commandText">Query to run a stored procedure.</param>
            <param name="entitySetName">The entity set of the TResult type.</param>
            <param name="executionOptions"><c>ExecutionOptions</c> object.</param>
            <param name="cancellationToken">A <c>CancellationToken</c> to observe while waiting for the task to complete.</param>
            <param name="input">Input value.</param>
            <returns>Returns the list of <c>TOutput</c> objects.</returns>
        </member>
        <member name="T:Aliencube.EntityContextLibrary.Interfaces.IUnitOfWork">
            <summary>
            This provides interfaces to the <c>UnitOfWork</c> class.
            </summary>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IUnitOfWork.BeginTransaction">
            <summary>
            Begins database transactions.
            </summary>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IUnitOfWork.SaveChanges">
            <summary>
            Saves database changes.
            </summary>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IUnitOfWork.SaveChangesAsync">
            <summary>
            Saves database changes.
            </summary>
            <returns>
            Returns <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IUnitOfWork.Commit">
            <summary>
            Commits database transactions.
            </summary>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IUnitOfWork.CommitAsync">
            <summary>
            Commits database transactions.
            </summary>
            <returns>
            Returns <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IUnitOfWork.Rollback">
            <summary>
            Rolls back database transactions.
            </summary>
        </member>
        <member name="P:Aliencube.EntityContextLibrary.Interfaces.IUnitOfWork.DbContextType">
            <summary>
            Gets the type of the <c>DbContext</c> instance.
            </summary>
        </member>
        <member name="T:Aliencube.EntityContextLibrary.Interfaces.IUnitOfWorkManager">
            <summary>
            This provides interfaces to the <c>UnitOfWorkManager</c> class.
            </summary>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.Interfaces.IUnitOfWorkManager.CreateInstance``1">
            <summary>
            Creates a new <c>UnitOfWork</c> instance.
            </summary>
            <typeparam name="TContext"><c>DbContext</c> type instance.</typeparam>
            <returns>Returns a new <c>UnitOfWork</c> instance.</returns>
        </member>
        <member name="T:Aliencube.EntityContextLibrary.UnitOfWork`1">
            <summary>
            This represents the entity for unit of work.
            </summary>
            <typeparam name="TContext"><c>DbContext</c> type instance.</typeparam>
            <summary>
            This represents the entity for unit of work.
            </summary>
            <typeparam name="TContext"><c>DbContext</c> type instance.</typeparam>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.UnitOfWork`1.GetDbContext(Aliencube.EntityContextLibrary.Interfaces.IDbContextFactory)">
            <summary>
            Gets the <c>DbContext</c> from the <c>DbContextFactory</c> instance.
            </summary>
            <param name="contextFactory"><c>DbContextFactory</c> instance.</param>
            <returns>Returns the <c>DbContext</c> instance.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.UnitOfWork`1.GetObjectContext(`0)">
            <summary>
            Gets the <c>ObjectContext</c> instance from <c>DbContext</c>.
            </summary>
            <param name="dbContext"><c>DbContext</c> instance.</param>
            <returns>Returns the <c>ObjectContext</c> instance.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.UnitOfWork`1.OpenDbConnection">
            <summary>
            Opens the database connection.
            </summary>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.UnitOfWork`1.GetConnectionState(System.Data.Entity.Core.Objects.ObjectContext)">
            <summary>
            Gets the database connection state.
            </summary>
            <param name="objectContext">ObjectContext instance.</param>
            <returns>Returns the database connection state.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.UnitOfWork`1.#ctor(Aliencube.EntityContextLibrary.Interfaces.IDbContextFactory)">
            <summary>
            Initialises a new instance of the <see cref="T:Aliencube.EntityContextLibrary.UnitOfWork`1"/> class.
            </summary>
            <param name="contextFactory"><see cref="T:Aliencube.EntityContextLibrary.DbContextFactory`1"/> instance.</param>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.UnitOfWork`1.BeginTransaction">
            <summary>
            Begins database transactions.
            </summary>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.UnitOfWork`1.SaveChanges">
            <summary>
            Saves database changes.
            </summary>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.UnitOfWork`1.SaveChangesAsync">
            <summary>
            Saves database changes.
            </summary>
            <returns>
            Returns <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.UnitOfWork`1.Commit">
            <summary>
            Commits database transactions.
            </summary>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.UnitOfWork`1.CommitAsync">
            <summary>
            Commits database transactions.
            </summary>
            <returns>
            Returns <see cref="T:System.Threading.Tasks.Task"/>.
            </returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.UnitOfWork`1.Rollback">
            <summary>
            Rolls back database transactions.
            </summary>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.UnitOfWork`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing,
            or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Aliencube.EntityContextLibrary.UnitOfWork`1.Context">
            <summary>
            Gets the <c>DbContext</c> instance.
            </summary>
        </member>
        <member name="P:Aliencube.EntityContextLibrary.UnitOfWork`1.DbContextType">
            <summary>
            Gets the type of the <c>DbContext</c> instance.
            </summary>
        </member>
        <member name="T:Aliencube.EntityContextLibrary.UnitOfWorkManager">
            <summary>
            This represents an entity for the unit of work manager.
            </summary>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.UnitOfWorkManager.#ctor(Aliencube.EntityContextLibrary.Interfaces.IDbContextFactory[])">
            <summary>
            Initialises a new instance of the <see cref="T:Aliencube.EntityContextLibrary.UnitOfWorkManager"/> class.
            </summary>
            <param name="contextFactories">List of the <c>DbContextFactory</c> instances.</param>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.UnitOfWorkManager.CreateInstance``1">
            <summary>
            Creates a new <c>UnitOfWork</c> instance.
            </summary>
            <typeparam name="TContext"><c>DbContext</c> type instance.</typeparam>
            <returns>Returns a new <c>UnitOfWork</c> instance.</returns>
        </member>
        <member name="M:Aliencube.EntityContextLibrary.UnitOfWorkManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing,
            or resetting unmanaged resources.
            </summary>
        </member>
    </members>
</doc>
